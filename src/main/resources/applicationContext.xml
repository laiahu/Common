<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/security 
	http://www.springframework.org/schema/tx/spring-security-3.1.xsd
	http://www.springframework.org/schema/mvc 
    http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd"
	default-autowire="byName">

	<!-- 
	<import resource="applicationContext_xmemcache.xml"/>
 	-->
 	
 	 <!-- 采用的annotation的方式进行AOP和 IOC -->  
      
    <!-- 配置了component-scan可以移除   
     <context:annotation-config /> 
     -->
     
 	<!-- 启动对@AspectJ注解的支持 -->  
    <aop:aspectj-autoproxy />   
    <!-- 自动扫描包(自动注入) -->  
    <context:component-scan base-package="com.mycompany.common.service" />   
 	
 	<context:component-scan base-package="com.mycompany.common.aop" />  
 	
 	<!-- spring context上下文，可取得注解的类 -->
 	<bean id="springContextHolder" class="com.mycompany.common.util.SpringContextHolder"></bean>
 	
	<!-- aop 
	<bean id="aopMethod" class="com.mycompany.common.aop.test.AopMethod"></bean>
	<aop:config>
		<aop:pointcut id="servicepointcut" expression="execution( * com.mycompany.common.service..*.*(..))" />
		<aop:aspect id="myaspect" ref="aopMethod">
			//对应expression执行前运行 
			<aop:before method="beforeMethod" pointcut-ref="servicepointcut" />
			//对应expression执行后返回正常运行 
			<aop:after-returning method="afterReturningMethod"
				pointcut-ref="servicepointcut" />
			//对应expression抛出异常运行
			<aop:after-throwing method="afterThrowing"
				pointcut-ref="servicepointcut" />
			//对应expression执行后运行（不管是否抛出异常都会执行）
			<aop:after method="afterMethod" pointcut-ref="servicepointcut" />
		</aop:aspect>
	</aop:config>          
     -->          
</beans>
